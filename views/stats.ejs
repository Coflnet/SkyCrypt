<%

/*
..######...#######..##....##..######..########....###....##....##.########..######.
.##....##.##.....##.###...##.##....##....##......##.##...###...##....##....##....##
.##.......##.....##.####..##.##..........##.....##...##..####..##....##....##......
.##.......##.....##.##.##.##..######.....##....##.....##.##.##.##....##.....######.
.##.......##.....##.##..####.......##....##....#########.##..####....##..........##
.##....##.##.....##.##...###.##....##....##....##.....##.##...###....##....##....##
..######...#######..##....##..######.....##....##.....##.##....##....##.....######.
*/
const rarityOrder = ["very_special", "special", "supreme", "divine", "mythic", "legendary", "epic", "rare", "uncommon", "common"];

const skillItems = {
  alchemy: "icon-379_0",
  archer: 'icon-261_0',
  berserk: 'icon-267_0',
  carpentry: "icon-58_0",
  catacombs: 'head-964e1c3e315c8d8fffc37985b6681c5bd16a6f97ffd07199e8a05efbef103793',
  combat: "icon-272_0",
  enchanting: "icon-116_0",
  farming: "icon-294_0",
  fishing: "icon-346_0",
  foraging: "icon-6_3",
  healer: 'icon-373_0',
  mage: 'icon-369_0',
  mining: "icon-274_0",
  runecrafting: "icon-378_0",
  social: "icon-388_0",
  taming: "icon-383_0",
  tank: 'icon-299_0',
  skyblock_level: 'head-2e2cc42015e6678f8fd49ccc01fbf787f1ba2c32bcf559a015332fc5db50',
  boss: "icon-397_1",
  rift: "icon-110_0",
};

const skillEmojis = {
  alchemy: "⚗️",
  carpentry: "🪑",
  combat: "⚔️",
  enchanting: "🔮",
  farming: "🌾",
  fishing: "🎣",
  foraging: "🌳",
  mining: "⛏️",
  runecrafting: "✨",
  social: "💬",
  taming: "🦴",
  dungeons: "💀",
  archer: "🏹",
  berserk: "🗡️",
  healer: "🚑",
  mage: "🧙🏽",
  tank: "🛡️",
};

const slayerEmojis = {
  zombie: "🧟",
  spider: "🕸️",
  wolf: "🐺",
  enderman: "🔮",
  blaze: "🔥",
  vampire: "🩸"
};

/*
.########.##.....##.##....##..######..########.####..#######..##....##..######.
.##.......##.....##.###...##.##....##....##.....##..##.....##.###...##.##....##
.##.......##.....##.####..##.##..........##.....##..##.....##.####..##.##......
.######...##.....##.##.##.##.##..........##.....##..##.....##.##.##.##..######.
.##.......##.....##.##..####.##..........##.....##..##.....##.##..####.......##
.##.......##.....##.##...###.##....##....##.....##..##.....##.##...###.##....##
.##........#######..##....##..######.....##....####..#######..##....##..######.
*/

function getRarityUpgradeClass(item) {
  let upgrades = 0

  upgrades += item.extra?.recombobulated ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TIER_BOOST' && !item.ignoresTierBoost ? 1 : 0

  return upgrades > 0 ? `piece-rarity-upgrade-${upgrades}` : ''
}

function isEnchanted(item) {
  // heads
  if ([397].includes(item.id)) {
    return false;
  }

  // enchanted book, bottle o' enchanting, nether star
  if ([403, 384, 399].includes(item.id)) {
    return true;
  }

  // potions potions with actual effects (not water bottles)
  if (item.id === 373 && item.Damage !== 0) {
    return true;
  }

  if ("tag" in item && Array.isArray(item.tag.ench)) {
    return true;
  }

  if (item.glowing) {
    return true;
  }

  return false;
}

function itemIcon(item, classes) { %>
  <div <% if (item.texture_path) { %> style='background-image: url("<%= item.texture_path %>")' <% } %> class="
    <%= classes.join(" ") %>
      item-icon
      <% if (isEnchanted(item)) { %> is-enchanted <% } %>
      <% if (item.texture_path) { %> custom-icon <% } %>
      <% if (item.Damage != 0) { %> icon-<%= item.id %>_0 <% } %>
      icon-<%= item.id %>_<%= item.Damage %>
    ">
  </div>
<% }

function jerriefy(rank) {
  if (extra.isFoolsDay) {
    rank = rank.replace("VIP", "JER");
    rank = rank.replace("MVP", "JRY");
    rank = rank.replace("HELPER", "JERRY");
    rank = rank.replace("MOD", "JERRY");
    rank = rank.replace("PIG", "JERRY");
    rank = rank.replace("ADMIN", "SR JERRY");
    rank = rank.replace("YOUTUBE", "YERRY");
  }

  return rank;
}

function getMetaTitle() {
  let metaTitle = calculated.display_name;
  if (calculated.display_emoji) {
    metaTitle += calculated.display_emoji;
  }

  switch (calculated.profile.game_mode) {
    case "ironman":
      metaTitle += ` (${calculated.profile.cute_name} ♻️)`;
      break;

    case "bingo":
      metaTitle += ` (${calculated.profile.cute_name} 🎲)`;
      break;

    case "island":
      metaTitle += ` (${calculated.profile.cute_name} 🌴)`;
      break;

    default:
      metaTitle += ` (${calculated.profile.cute_name})`;
      break;
  }

  return metaTitle;
}


function getMetaDescription() {
	let description = "";

	// Base
  if (calculated.user_data?.first_join?.unix !== undefined) {
	  description += `${calculated.display_name} has been playing SkyBlock for ${moment(calculated.user_data.first_join.unix).fromNow(true)}`;
  }

  const highestRaritySword = items.weapons?.highest_priority_weapon?.display_name;

	// Armor set
  if (items.armor?.set_name !== undefined) {
    if (highestRaritySword !== undefined) {
      description += `, is wearing ${items.armor.set_name}`;
    } else {
      description += `and is wearing ${items.armor.set_name}`;
    }
  }

	// Sword
	if (highestRaritySword !== undefined) {
    description += items.armor?.set_name
      ? ` and fighting with ${helper.aOrAn(highestRaritySword)} ${highestRaritySword}`
      : ` and is fighting with ${helper.aOrAn(highestRaritySword)} ${highestRaritySword}`;
	}

	return description;
}

function getDescription() {
  let output = "";

  // Skyblock Level
  if (calculated.skyblock_level.xp !== 0 && calculated.skyblock_level.level !== 0) {
    output += `🌟 Skyblock Level: ${calculated.skyblock_level.level + calculated.skyblock_level.progress}\n`;
  }

  // Armor
  if (items.armor?.set_name !== undefined) {
    output += `🛡️ ${items.armor.set_name}\n`;
  }

  // Sword
  if (items.weapons?.highest_priority_weapon !== undefined) {
    output += `🗡️ ${items.weapons.highest_priority_weapon.display_name}\n`;
  }

  // Skills
  const skills = calculated.skills?.skills;
  if (skills !== undefined) {
    const skill = Object.keys(skills).sort((a, b) => skills[b].level.xp - skills[a].level.xp)[0];

    if (skills[skill].level !== undefined) {
      output += `${skillEmojis[skill]} ${helper.titleCase(skill)} ${skills[skill].level}\n`;
    }
  }

  // Pet
  if (calculated.pets?.pets !== undefined) {
    const activePet = calculated.pets.pets.find((a) => a.active);
    if (activePet !== undefined) {
      output += `${activePet.emoji} ${helper.titleCase(activePet.rarity)} ${activePet.display_name} (Lvl ${activePet.level.level})\n`;
    }
  }

  // Line break
  output += "\n";

  // Slayers
  if (calculated.slayer?.total_slayer_xp > 0) {
    output += "🤺 Slayer: ";

    const slayerOrder = ["zombie", "spider", "wolf", "enderman", "vampire", "blaze"];
    for (const slayer of slayerOrder) {
      if (calculated.slayer.slayers[slayer] === undefined) {
        continue;
      }

      const slayerInfo = calculated.slayer.slayers[slayer];
      if (slayerInfo.level.level === 0) {
        continue;
      }

      output += `${slayerEmojis[slayer]} ${slayerInfo.level.currentLevel} `;
    }

    output += "\n";
  }

  // Dungeons
  if (calculated.dungeons !== undefined) {
    const catacombs = calculated.dungeons.catacombs?.level?.level ?? 0;
    if (catacombs > 0) {
      output += `${skillEmojis["dungeons"]} Catacombs: ${catacombs}\n`;
    }

    const classes = calculated.dungeons?.classes?.classes;
    if (classes !== undefined) {
      const classesLine = [];
      for (const [dclass, data] of Object.entries(classes)) {
        output += `${skillEmojis[dclass]} ${data.level?.level ?? 0} `;
      }
    }

    output += "\n";
  }

  output += "\n";

  if (calculated.skills?.averageSkillLevel || calculated.dungeons?.classes?.average_level) {
    // Skill Average
    if (calculated.skills.averageSkillLevel !== undefined) {
      output += `📚 Avg Skill Level: ${calculated.skills.averageSkillLevel.toFixed(2)}\n`;
    }

    // Dungeons classs average
    if (calculated.dungeons?.classes?.average_level) {
      output += `⚔️  Avg Class Level: ${calculated.dungeons?.classes?.average_level.toFixed(2)}\n`;
    }

    output += "\n";
  }

  // Networth, Bank & purse
  if (calculated.networth.noInventory === false) {
    output += `💸 Networth: ${helper.formatNumber(calculated.networth.networth, true)} \n`;
  }

  if (calculated.currencies?.bank !== undefined) {
    output += `🏦 Bank: ${helper.formatNumber(calculated.currencies.bank, true)} \n`;
  }

  if (calculated.currencies.purse !== undefined) {
    output += `💰 Purse: ${helper.formatNumber(calculated.currencies.purse, true)}\n`;
  }

  return output;
}

/*
..######...########.##....##.########.########.....###....########.########.########.
.##....##..##.......###...##.##.......##.....##...##.##......##....##.......##.....##
.##........##.......####..##.##.......##.....##..##...##.....##....##.......##.....##
.##...####.######...##.##.##.######...########..##.....##....##....######...##.....##
.##....##..##.......##..####.##.......##...##...#########....##....##.......##.....##
.##....##..##.......##...###.##.......##....##..##.....##....##....##.......##.....##
..######...########.##....##.########.##.....##.##.....##....##....########.########.
*/
const metaTitle = getMetaTitle()
const description = getDescription()
const metaDescription = getMetaDescription()

%>
<!DOCTYPE html>
<html lang="en">

<head>
  <title><%= calculated.display_name %><% if (calculated.display_emoji) { %> <%= calculated.display_emoji %> <% } %> | SkyCrypt</title>
  <meta name="description" content="<%= metaDescription %>">
  <link rel="icon" href="https://crafatar.com/avatars/<%= extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid %>?size=32&overlay" sizes="32x32" type="image/png">
  <meta property="og:type" content="profile">
  <meta property="og:title" content="<%= metaTitle %>">
  <meta property="og:image" content="https://crafatar.com/avatars/<%= calculated.uuid %>?size=512&overlay">
  <meta property="og:description" content="<%= description %>">
  <meta property="og:profile:username" content="<%= calculated.display_name %>">
  <meta name="twitter:card" content="summary">
  <%- include('../includes/resources') %>
</head>

<body class="page-stats">
  <svg xmlns="http://www.w3.org/2000/svg" height="0" width="0" style="position: fixed;">
    <filter id="enchanted-glint">
      <feImage href="/resources/img/enchanted-glint.png" />
      <feComposite in2="SourceGraphic" operator="in" />
      <feBlend in="SourceGraphic" mode="screen" />
    </filter>
  </svg>
  <%- include('../includes/header') %>
  <div id="dimmer">
    <video preload="none" id="enable_api" loop>
      <source type="video/webm" src="/resources/video/enable-api.webm" />
      <source type="video/mp4" src="/resources/video/enable-api.mp4" />
    </video>
  </div>
  <div id="stats_content">
    <div class="item-name">
      <div class="stats-piece-icon__wrapper">
        <div class="stats-piece-icon"></div>
      </div>
      <p class="item-name__name"></p>
      <button class="close-lore" aria-label="Close"></button>
    </div>
    <div class="item-lore"></div>
    <inventory-view class="backpack-contents" preview></inventory-view>
  </div>
  <div id="skin_display">
    <div id="player_model"></div>
  </div>
  <main id="wrapper" data-sticky-container>
    <% if (extra.cacheOnly === true) { %>
      <figure class="banner error">
        <figcaption>Cache Only Mode!</figcaption>
        <p>
          SkyCrypt is <strong>only</strong> showing the last known state of user's profiles which may be outdated due to API maintenance.<br>
          <br>
          For more info about Hypixel outages visit the official <a href="https://status.hypixel.net/" target="_blank" rel="noreferrer"> Hypixel Status</a>.
        </p>
      </figure>
    <% } %>

    <% if (Object.keys(calculated.errors).length > 0) { %>
      <figure class="banner error">
        <figcaption>An unexpected error has occurred.</figcaption>
        <p>
          <% for (let error in calculated.errors) { %>
            <% console.log(calculated.errors[error]) %>
            <%- calculated.errors[error] %>

            <br>
          <% } %>
          <br>
          <strong>Please report the error on our <a href="https://discord.gg/cNgADv2kEQ" target="_blank" rel="noreferrer">Discord</a>.</strong>
        </p>
      </figure>
    <% } %>

    <div id="player_profile"><span class="text-stats-for">Stats for</span>
      <span tabindex="0" id="stats_for_player">
        <!-- Player Rank -->
        <span class="player-rank-name"><%- jerriefy(calculated.rank_prefix) %></span>
        <!-- Player Username -->
        <span class="player-name"><%= calculated.display_name %></span>
        <!-- Custom Player Emoji -->
        <% if (calculated.display_emoji_img) { %>
          <img class="emoji" draggable="false" src="<%= calculated.display_emoji_img %>">
        <% } else if (calculated.display_emoji) { %>
          <%- calculated.display_emoji %>
        <% } %>

        <!-- Profile Members -->
        <ul id="other_players">
          <% calculated.members.forEach(member => { %>
          <li>
            <a class="goto" href="/stats/<%= member.uuid %>/<%= calculated.profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
              <!-- Username -->
              <span class="player-name <%= member.removed === true ? "kicked" : "" %>"> <%= member.display_name %> </span>

              <!-- Emoji -->
              <% if (member.emojiImg) { %>
                <img class="emoji" draggable="false" src="<%= member.emojiImg %>">
              <% } else if (member.emoji) { %>
                <%- member.emoji %>
              <% } %>
            </a>
          </li>
          <% }); %>
        </ul>
      </span>
      <span class="text-on"> on </span>
      <span tabindex="0" id="stats_for_profile">
        <!-- Profile Name -->
        <span class="profile-name"><%= calculated.profile.cute_name %></span>
        <!-- Profile Emoji -->
        <% if (calculated.profile.game_mode == 'ironman') { %>
          <img src="/resources/img/icons/ironman.png" class="emoji" alt="ironman">
        <% } else if (calculated.profile.game_mode == 'bingo') { %>
          <%- "🎲" %>
        <% } else if (calculated.profile.game_mode == 'island') { %>
          <%- "🌴" %>
        <% } %>

        <ul id="other_profiles">
          <% for (let profile_id in calculated.profiles) {
            const _profile = calculated.profiles[profile_id]; %>
            <li>
              <a class="goto" href="/stats/<%= calculated.uuid %>/<%= _profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
                <span class="profile-name"><%= _profile.cute_name %></span>

                <% if (_profile.game_mode == 'ironman') { %>
                  <img src="/resources/img/icons/ironman.png" class="emoji">
                <% } else if (_profile.game_mode == 'bingo') { %>
                 <%- "🎲" %>
                <% } else if (_profile.game_mode == 'island') { %>
                  <%- "🌴" %>
                <% } %>
              </a>
            </li>
          <% } %>
        </ul>
      </span>

      <div id="additional_player_stats">
        <!-- Star Button -->
        <button class="additional-player-stat svg-icon favorite" data-username="<%= calculated.uuid %>" role="checkbox">
          <svg viewBox="0 0 24 24">
            <title>star</title>
            <path class="solid" fill="white" d="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" />
            <path class="outline" fill="white" d="M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z" />
          </svg>
        </button>

        <guild-button class="additional-player-stat"></guild-button>

        <!-- Placnke Button-->
        <a href="https://plancke.io/hypixel/player/stats/<%= calculated.display_name %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link">Plancke</a>
        <a href="https://sky.coflnet.com/player/<%= calculated.display_name %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link">Coflnet</a>

        <div id="additional_socials">
          <!-- Copy UUID Button -->
          <button data-copy-text="<%= calculated.uuid %>" class="copy-text additional-player-stat">Copy UUID</button>

          <% if ('social' in calculated && Object.keys(calculated.social).length > 0) { %>
            <!-- Discord Button -->
            <% if ('DISCORD' in calculated.social) { %>
              <button data-copy-text="<%= calculated.social.DISCORD %>" class="additional-player-stat copy-text external-discord external-icon"><%= calculated.social.DISCORD %></button>
            <% } %>

            <!-- Twitter Button -->
            <% if ('TWITTER' in calculated.social) { %>
              <a data-tippy-content="Twitter" href="<%= calculated.social.TWITTER %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitter"></a>
            <% } %>

            <!-- Youtube Button -->
            <% if ('YOUTUBE' in calculated.social) { %>
              <a data-tippy-content="YouTube" href="<%= calculated.social.YOUTUBE %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-youtube"></a>
            <% } %>

            <!-- Instagram Button -->
            <% if ('INSTAGRAM' in calculated.social) { %>
              <a data-tippy-content="Instagram" href="<%= calculated.social.INSTAGRAM %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-instagram"></a>
            <% } %>

            <!-- Twitch Button -->
            <% if ('TWITCH' in calculated.social) { %>
              <a data-tippy-content="Twitch" href="<%= calculated.social.TWITCH %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitch"></a>
            <% } %>

            <!-- Hypixel Button -->
            <% if ('HYPIXEL' in calculated.social) { %>
              <a data-tippy-content="Hypixel Forums" href="<%= calculated.social.HYPIXEL %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-hypixel"></a>
            <% } %>

            <button class="additional-player-stat" id="reveal_socials" aria-label="reveal socials"></button>
          <% } %>
          <br/>
          <span class='stat-name'>Unsoulbound Networth: </span>
          <span class='stat-value'>
          <%= helper.formatNumber(parseFloat(calculated.networth.unsoulboundNetworth.toFixed(2))) %></span>
          </span><br/>
          <span class='stat-name'>Total Networth: </span>
          <span class='stat-value'>
          <%= Math.floor(calculated.networth.networth).toLocaleString() %> (<%= helper.formatNumber(parseFloat(calculated.networth.networth.toFixed(2))) %>)</span>
          </span><br/>
        ">
            <span class="stat-name">Networth: </span>
            <span class="stat-value"><%= helper.formatNumber(parseFloat(Math.round(calculated.networth.networth))) %></span></span>
        </div>
        <% } %>
      </div>
    </div>

    <!-- Technoblade Support -->
    <% if (calculated.uuid == "b876ec32e396476ba1158438d83c67d4") { %>
      <div id="techno-support">
        <span class="support-title">Thank you for everything, Technoblade.</span>
        <br>
        <p class="support-text">
          If you can, <a href="https://www.curesarcoma.org/donate/" target="_blank">donate</a> to the Sarcoma Foundation of America and <a href="https://technoblade.com/" target="_blank">buy</a> his merch.
        </p>
      </div>
    <% } %>

    <!-- Basic Stats (Skills, player stats and custom calculations) -->
    <%- include('./sections/stats/basic_stats.ejs', { skillItems }); %>

    <!-- Navigation Bar -->
    <div id="nav_bar">
      <div id="nav_bar_line"></div>
      <div id="nav_bar_background"></div>
      <div id="nav_items_container">
        <% if (items.armor !== undefined) { %> <a class="nav-item" href="#Armor">Armor</a> <% } %>
        <% if (items.disabled?.inventory === false) { %> <a class="nav-item" href="#Weapons">Weapons</a> <% } %>
        <% if (items.disabled?.inventory === false) { %> <a class="nav-item" href="#Accessories">Accessories</a> <% } %>
        <% if (calculated.pets !== undefined) { %> <a class="nav-item" href="#Pets">Pets</a> <% } %>
        <% if (items.disabled?.inventory === false) { %> <a class="nav-item" href="#Inventory">Inventory</a> <% } %>
        <a class="nav-item" href="#Skills">Skills</a>
        <% if (calculated.dungeons !== undefined) { %> <a class="nav-item" href="#Dungeons">Dungeons</a> <% } %>
        <% if (calculated.slayer !== undefined) { %> <a class="nav-item" href="#Slayer">Slayer</a> <% } %>
        <% if (calculated.minions.unlockedTiers > 0) { %> <a class="nav-item" href="#Minions">Minions</a> <% } %>
        <% if (calculated.bestiary !== undefined) { %> <a class="nav-item" href="#Bestiary">Bestiary</a> <% } %>
        <% if (calculated.collections !== undefined) { %> <a class="nav-item" href="#Collections">Collections</a> <% } %>
        <% if (calculated.crimson_isle !== undefined) { %>  <a class="nav-item" href="#Crimson_Isle">Crimson Isle</a> <% } %>
        <% if (calculated.rift !== undefined) { %> <a class="nav-item" href="#Rift"><abbr title="RIft">Rift</abbr></a> <% } %>
        <% if (calculated.profile.game_mode === "bingo" && calculated.bingo !== undefined) { %> <a class="nav-item" href="#Bingo"><abbr title="Bingo">Bingo</abbr></a> <% } %>
        <% if (calculated.misc !== undefined) { %> <a class="nav-item" href="#Misc"><abbr title="Miscellaneous">Misc</abbr></a> <% } %>
      </div>
    </div>

    <!-- API and Profile Notices -->
    <div class="stat-containers">
      <% const notAvailable = [];
      if (items.disabled?.inventory === true) {
        notAvailable.push('Weapons', 'Accessories', 'Inventory', 'Storage');
      }

      if (items.disabled?.personal_vault === true) {
        notAvailable.push('Personal Vault');
      }

      if (calculated?.collections === undefined) {
        notAvailable.push('Collections');
      }

      if (notAvailable.length > 0 || calculated.profile.game_mode && calculated.profile.game_mode !== "normal") { %>
        <div class="stat-container info-container-wrapper">
          <div class="info-container">
            <div class="info-header">Notice</div>
            <% if (notAvailable.length > 0) { %>
              <%= notAvailable.join(', ') %> not available for <%= calculated.display_name %> due to limited API access.<br><span><a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</span>
              <br>
            <% } %>

            <% if (calculated.profile.game_mode == 'ironman') { %>
              <% if (notAvailable.length > 0) { %>
                <br>
              <% } %>

              This is an <strong>Ironman</strong> profile. The player cannot use the auction house, bazaar, or trade with other players.
            <% } %>


            <% if (calculated.profile.game_mode == 'bingo') { %>
              <% if (notAvailable.length > 0) { %>
                <br>
              <% } %>

              This is a <strong>Bingo</strong> profile. The player cannot spend gems, use the auction house, bazaar or trade with other players.
            <% } %>

            <% if (calculated.profile.game_mode == 'island') { %>
              <% if (notAvailable.length > 0) { %>
                <br>
              <% } %>

              This is a <strong>Stranded</strong> profile. The player cannot leave their skyblock island or trade with other players.
            <% } %>
          </div>
        </div>
      <% } %>

      <!-- Armor (Armor and Equipment) -->
      <% if (items.armor !== undefined) { %>
        <%- include('./sections/stats/items/armor.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>
      <% } %>

      <!-- Wardrobe -->
      <% if (items.wardrobe !== undefined) { %>
        <%- include('./sections/stats/items/wardrobe.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>
      <% } %>

      <% if (items.disabled?.inventory === false) { %>
        <!-- Weapons -->
        <% if (items.weapons !== undefined) { %>
          <%- include('./sections/stats/items/weapons.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>
        <% } %>

        <!-- Accessories (Active, Inactive and Missing) -->
        <% if (calculated.accessories !== undefined) { %>
          <%- include('./sections/stats/items/accessories.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>
        <% } %>
      <% } %>

      <!-- Pets -->
      <% if (calculated.pets !== undefined) { %>
        <%- include('./sections/stats/pets.ejs', { getRarityUpgradeClass, rarityOrder }); %>
      <% } %>

      <% if (items.disabled?.inventory === false) { %>
        <!-- Inventories (Inventory, Storage, Ender Chest, Vault, Accessories, Pots, Fish, Quiver) -->
        <%- include('./sections/stats/items/inventory.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>
      <% } %>

      <!-- Skills -->
      <%- include('./sections/stats/skills.ejs', { getRarityUpgradeClass, rarityOrder, isEnchanted }); %>

      <!-- Dungeons -->
      <% if (calculated.dungeons !== undefined) { %>
        <%- include('./sections/stats/dungeons.ejs', { skillItems }); %>
      <% } %>

      <!-- Slayer -->
      <% if (calculated.slayer !== undefined) { %>
        <%- include('./sections/stats/slayer.ejs', {}); %>
      <% } %>

      <!-- Minions -->
      <% if (calculated.minions.unlockedTiers > 0) { %>
        <%- include('./sections/stats/minions.ejs', { skillItems }); %>
      <% } %>

      <% if (calculated.bestiary !== undefined) {%>
              <% if (slayer.level.unclaimed){ %>
                <div class="slayer-unclaimed">unclaimed slayer rewards!</div>
              <% } %>

              <% max = slayer.level.currentLevel == slayer.level.maxLevel ? 'golden-text' : '' %>
              <span class="<%= max %> stat-name slayer-level">
                <%= slayerName %> level <span class="stat-value <%= max %>"><%= slayer.level.currentLevel %></span>
              </span>

              <div class="slayer-bar <%= slayer.level.currentLevel == slayer.level.maxLevel ? 'maxed-slayer' : ''%>">
                <div class="skill-progress-bar slayer-progress-bar" style="--progress: <%= slayer.level.currentLevel == slayer.level.maxLevel ? 1 : slayer.level.progress %>"></div>
                <div class="skill-progress-text slayer-progress-text">
                  <%= slayer.level.xp.toLocaleString() %><% if(slayer.level.xpForNext != 0) { %> / <%= slayer.level.xpForNext.toLocaleString() %> <% } %> XP
                </div>
              </div>
            </div>
            <% } %>
          </div>
          <%
          const maxSlayerLevel = Math.max(...Object.values(calculated.slayers).map(slayer => slayer.level?.currentLevel ?? 0));
          if (maxSlayerLevel > 0){ %>
            <div data-bonus-stats="slayer_zombie,slayer_spider,slayer_wolf,slayer_enderman"></div>
          <% } %>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-minions">
        <a class="stat-anchor" id="Minions"></a>
        <h2 class="stat-header">Minions</h2>
        <div class="stat-content">
          <%
          let uniqueMinions = 0;
          let maxedMinions = 0;
          let skippedMinions = 0;
          let uniqueMinionsType = {};
          let minionsType = {};

          for(const minion of calculated.minions){
            if (!uniqueMinionsType[minion.type]) uniqueMinionsType[minion.type] = 0
            if (!minionsType[minion.type]) minionsType[minion.type] = 0

            minionsType[minion.type] += 1
            if (minion.tiers == minion.maxLevel) uniqueMinionsType[minion.type] += 1

            uniqueMinions += minion.levels.length;
            skippedMinions += minion.maxLevel - minion.levels.length;

            if(minion.maxLevel == minion.tiers)
              maxedMinions++;
          }
        %>
          <a href="https://hypixel.net/threads/2166857/" target="_blank" rel="noreferrer" class="external-app">
            <div class="external-app-icon icon-google-sheets"></div>
            <div class="external-app-name">Minions Sheet <span class="grey-text">by TBlazeWarriorT</span></div>
            <div class="external-app-description">Check the next cheapest or fastest Minion upgrades and find out which Minions will earn you the most from Bazaar, for free.</div>
          </a>
          <p class="stat-raw-values">
            <% max = uniqueMinions == constants.MINIONS_MAX_UNIQUES ? 'golden-text' : '' %><span class="stat-name <%= max %>">Unique Minions: </span><span class="stat-value <%= max %>"><%= uniqueMinions %> / <%= constants.MINIONS_MAX_UNIQUES %></span><span class="grey-text"> (<%= Math.floor(uniqueMinions / constants.MINIONS_MAX_UNIQUES * 100) %>%)</span><br>
            <% max = calculated.minion_slots.currentSlots == constants.MINIONS_MAX_SLOTS ? 'golden-text' : '' %><span class="stat-name <%= max %>">Minion Slots: </span><span class="stat-value <%= max %>"><%= calculated.minion_slots.currentSlots %></span><span class=" grey-text"> (<%= calculated.minion_slots.toNextSlot %> to next slot)</span><br>
            <% max = calculated.misc.profile_upgrades.minion_slots == 5 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Bonus Minion Slots: </span><span class="stat-value <%= max %>"><%= calculated.misc.profile_upgrades.minion_slots %> / <%= constants.PROFILE_UPGRADES['minion_slots'] %></span><br>
            <% max = maxedMinions == _.size(constants.MINIONS) ? 'golden-text' : '' %><span class=" stat-name <%= max %>">Maxed Minions: </span><span class="stat-value <%= max %>"><%= maxedMinions %> / <%= _.size(constants.MINIONS) %></span><br>
            <% if(skippedMinions > 0){ %>
            <span class="stat-name">Skipped Minion Tiers: </span><span class="stat-value"><%= skippedMinions %></span><br>
            <% } %>
          </p>
          <%
        for(const type of constants.MINION_TYPES){
          const minions = calculated.minions.filter(a => a.type == type)
          if(minions.length == 0) continue;
          %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon <%= skillItems[type] %>"></div>
            </div>
            <span><%= type %></span>

            <% if(uniqueMinionsType[type] >= minionsType[type]){ %>
            <span class="category-header-maxed">max!</span>
            <% }else{ %>
            <span class="category-header-detail">(<%= uniqueMinionsType[type] %> / <%= minionsType[type]  %> max)</span>
            <% } %>
          </div>
          <div class="minions">
            <% for(const minion of minions){ %>
            <div data-tippy-content="Crafted variants:<br><br>
              <%for (let i = 1; i <= minion.tiers; i++){ %>
                <div class='minion-variant <% if(minion.levels.includes(i)){ %>minion-crafted<% } %>'><%= romanize(i) %></div>
              <%  } %>
              " class="chip
              <%= minion.maxLevel == 0 ? 'no-minion' : '' %>
              <%= minion.maxLevel == minion.tiers ? 'max-stat' : '' %>
              <%= minion.maxLevel != minion.levels.length ? 'skipped-minion' : '' %>
              ">
              <div class="chip-icon-wrapper">
                <div style="background-image: url(<%= minion.head %>)" class="item-icon custom-icon"></div>
              </div>
              <div class="chip-text">
                <span class="stat-name"><%= minion.name %> </span><span class="stat-value"><%= minion.maxLevel %></span>
              </div>
            </div>
            <% } %>
          </div>
          <%
        } %>
        </div>
      </div>

      <% if (calculated.bestiary !== null) {%>
        <%- include('./sections/stats/bestiary.ejs', {}); %>
      <% } %>

      <!-- Collections -->
      <% if (calculated.collections !== undefined) { %>
        <%- include('./sections/stats/collections.ejs', { skillItems }); %>
      <% } %>

      <!-- Crimson Isle -->
      <% if (calculated.crimson_isle !== undefined) { %>
        <%- include('./sections/stats/crimson_isle.ejs', {}); %>
      <% } %>

      <!-- Rift -->
      <% if (calculated.rift !== undefined) { %>
        <%- include('./sections/stats/rift.ejs', {}); %>
      <% } %>

      <!-- Bingo -->
      <% if (calculated.profile.game_mode === "bingo" && calculated.bingo !== undefined) { %>
        <%- include('./sections/stats/bingo.ejs', {}); %>
      <% } %>

      <!-- Miscellaneous -->
      <% if (calculated.misc !== undefined) { %>
        <%- include('./sections/stats/misc.ejs', { rarityOrder }); %>
          <% if (Object.keys(calculated.crimsonIsles.kuudra_completed_tiers).length > 0) { %>
        <p class="stat-sub-header">Kuudra Completions</p>
        <div class="collections">
          <%for (const tier in calculated.crimsonIsles.kuudra_completed_tiers) {
                const collection = calculated.crimsonIsles.kuudra_completed_tiers[tier];%>
          <div class="chip">
            <div class="chip-icon-wrapper">
              <div style="background-image:url('/head/<%= collection.head %>')" class="item-icon custom-icon"></div>
            </div>
            <div class="chip-text">
              <div class="collection-name"><span class="stat-name"><%= collection.name %> </span></div>
              <div class="collection-amount"><span class="stat-name">Kills: </span><span class="stat-value"><%= collection.completions.toLocaleString() %></span></div>
            </div>
          </div>
          <% } %>
        </div>
        <% } %>

        <% function getDojoRank(points) {
            if (points >= 1000) return 'S'
            if (points >= 800) return 'A'
            if (points >= 600) return 'B'
            if (points >= 400) return 'C'
            if (points >= 200) return 'D'
            return 'F'
          }
        if (Object.keys(calculated.crimsonIsles.dojo).length > 0) { %>
        <p class="stat-sub-header">Dojo Completions</p>
        <% max = calculated.crimsonIsles.total_dojo_points >= 7000 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Total Points: </span><span class="stat-value <%= max %>"><%= calculated.crimsonIsles.total_dojo_points.toLocaleString() %></span><br><br>
        <div class="collections">
          <%for (const type of Object.keys(calculated.crimsonIsles.dojo)) {
            const dojo = calculated.crimsonIsles.dojo[type]%>
          <div class="chip">
            <div class="chip-icon-wrapper">
              <div class="item-icon icon-<%= dojo.id %>_<%= dojo.damage %>"></div>
            </div>
            <div class="chip-text">
              <div class="collection-name <%= dojo.points >= 1000 ? 'max-stat' : '' %>"><span class="stat-name"><%= dojo.name %> </span></div>
              <div class="collection-amount">
                <span class="stat-name">Points: </span><span class="stat-value"><%= dojo.points.toLocaleString() %></span><br>
                <span class="stat-name">Rank: </span><span class="stat-value"><%= getDojoRank(dojo.points) %></span><br>
                <span class="stat-name">Time: </span><span class="stat-value"><%= (dojo.time / 1000).toLocaleString() %> Seconds</span>
              </div>
            </div>
          </div>
          <% } %>
        </div>
        <% } %>
      </div>
      <% } %>

      <% if (calculated.rift !== null) { %>
        <div class="stat-container stat-collections">
          <a class="stat-anchor" id="Rift"></a>
          <h2 class="stat-header">Rift</h2>
          <span data-tippy-content="
            <span class='stat-name'>Lifetime Motes: </span><span class='stat-value'><%= Math.floor(calculated.rift.motes.lifetime).toLocaleString() %></span>
            <div class='tippy-explanation'>Total Motes earned in Rift.</div>
            <span class='stat-name'>Mote Orbs: </span><span class='stat-value'><%= Math.floor(calculated.rift.motes.orbs).toLocaleString() %></span>
            <div class='tippy-explanation'>Amount of Mote Orbs player has picked up inside of the Rift.</div>
            ">
            <span class="stat-name">Motes: </span><span class="stat-value"><%= Math.floor(calculated.rift.motes.purse).toLocaleString() %></span></span>
          <br>


          <span data-tippy-content="
            <span class='stat-name'>Progress: </span><span class='stat-value'><%= (calculated.rift.enigma.souls / calculated.rift.enigma.total_souls * 100).toFixed(2) %>%</span>
            <div class='tippy-explanation'>Percentage of Enigma Souls found.</div>
            ">
            <% max = calculated.rift.enigma.souls === calculated.rift.enigma.total_souls ? 'golden-text' : '' %>
            <span class="stat-name <%= max %>">Enigma Souls: </span><span class="stat-value <%= max %>"><%= calculated.rift.enigma.souls %> / <%= calculated.rift.enigma.total_souls %></span></span>
          <br>


          <% max = calculated.rift.castle.grubber_stacks === calculated.rift.castle.max_burgers ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">McGrubber's Burgers: </span><span class="stat-value <%= max %>"><%= calculated.rift.castle.grubber_stacks %> / <%= calculated.rift.castle.max_burgers %></span>

          <p class="stat-sub-header">Porhtal</p>
          <% const porhtalsUnlocked = calculated.rift.wither_cage.killed_eyes.filter((a) => a.unlocked === true).length %>
          <% max = porhtalsUnlocked === calculated.rift.wither_cage.killed_eyes.length ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Eyes Unlocked: </span><span class="stat-value <%= max %>"><%= porhtalsUnlocked %></span><br><br>
          <div class="collections">
            <% for (const portal of calculated.rift.wither_cage.killed_eyes) { %>
              <div class="chip" data-missing="<%= portal.unlocked === false %>">
                <div class="chip-icon-wrapper">
                  <div style="background-image:url('/head/<%= portal.texture %>')" class="item-icon custom-icon"></div>
                </div>

                <div class="chip-text">
                  <div class="collection-name"><span class="stat-name"><%= portal.name %> </span></div>
                </div>
              </div>
            <% } %>
          </div>


          <p class="stat-sub-header">Timecharms</p>
          <% max = calculated.rift.timecharms.obtained_timecharms === calculated.rift.timecharms.timecharms.length ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Timecharms obtained: </span><span class="stat-value <%= max %>"><%= calculated.rift.timecharms.obtained_timecharms %></span><br><br>
          <div class="collections">
            <% for (const timecharm of calculated.rift.timecharms.timecharms) { %>
              <div class="chip" data-missing="<%= timecharm.unlocked === false %>">
                <div class="chip-icon-wrapper">
                  <div class="item-icon icon-<%= timecharm.id %>_<%= timecharm.damage %>"></div>
                </div>

                <div class="chip-text">
                  <% max = timecharm.unlocked === true ? 'golden-text' : '' %>
                  <div class="collection-name <%= max %>"><span class="stat-name"><%= timecharm.name %> </span></div>
                  <div class="collection-amount">
                    <% if (timecharm.unlocked === true) { %>
                      <span class="stat-name">Obtained: </span><span class="stat-value" data-tippy-content='Obtained on <local-time timestamp="<%= timecharm.unlocked_at  %>"></local-time>'><%= moment(timecharm.unlocked_at).fromNow() %></span>
                    <% } else { %>
                      <span class="stat-name">Not Obtained!</span>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>
          </div>
        </div>
      <% } %>


      <% if(Object.keys(calculated.misc).length > 0){ %>
      <div class="stat-container stat-misc">
        <a class="stat-anchor" id="Misc"></a>
        <h2 class="stat-header">Miscellaneous</h2>
        <div class="stat-content">

          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/1e5574a4ef94ef4ca300d02f644d98be07dbfba7df78808e8a9a021b067d996d)"></div>
            </div>
            <span>Essence</span>
          </div>
          <div class="collections">
            <% for (const [key, value] of Object.entries(calculated.essence)) { %>
            <div class="chip" data-missing="<%= value === 0 %>">
              <div class="chip-icon-wrapper">
                <div style="background-image:url('<%= constants.ESSENCE[key].head %>')" class="item-icon custom-icon"></div>
              </div>
              <div class="chip-text">
                <div class="collection-name"><span class="stat-name"><%= constants.ESSENCE[key].name %></span></div>
                <div class="collection-amount"><span class="stat-name">Amount: </span><span class="stat-value"><%= value.toLocaleString() %></span></div>
              </div>
            </div>
            <% } %>
          </div>
          <button class="stat-sub-header extender" aria-controls="essence-shop" aria-expanded="false">Essence Shop</button>
          <div class="essence-shop extendable" id="essence-shop">
            <div>
              <% for (const essence of Object.keys(constants.ESSENCE_SHOP)) { %>
              <div class="category-icon">
                <div style="background-image:url('<%= constants.ESSENCE[essence].head %>')" class="item-icon custom-icon"></div>
              </div>
              <span class="stat-sub-header"><%= helper.capitalizeFirstLetter(essence) %> Shop</span><br>
              <br>

              <% for (const perk of Object.keys(constants.ESSENCE_SHOP[essence])) {
                  const essenceShop = constants.ESSENCE_SHOP[essence][perk];
                  const playerPerk = Object.keys(calculated.perks).find(p => p === perk);
                  %>

              <div class="chip-text">
                <span data-tippy-content="<%= essenceShop.description %>">
                  <% max = calculated.perks[playerPerk] >= essenceShop.maxLevel ? 'golden-text' : '' %>
                  <span class="stat-name <%= max %>"><%= essenceShop.name %>: </span><span class="stat-value <%= max %>"><%= calculated.perks[playerPerk] || 0 %></span>
                </span><br>
              </div>
              <% } %>
              <br>
              <% } %>
            </div>
          </div>
          <% if(calculated.kills.length > 0 || calculated.deaths.length > 0){
          let totalKills = calculated.kills.length;
          let totalDeaths = calculated.deaths.length;

          let rows = Math.min(Math.max(totalKills, totalDeaths), 10);

          %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-267_0"></div>
            </div><span>kills</span>
          </div>
          <p class="stat-raw-values stat-kills">
            <span class="stat-name">Total Kills: </span><span class="stat-value"><%= calculated.kills.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span><br>
            <span class="stat-name">Total Deaths: </span><span class="stat-value"><%= calculated.deaths.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span>
          </p>

          <div class="kills-deaths-container narrow-info-container-wrapper">
            <div class="narrow-info-container top-kills">
              <div class="narrow-info-header">Kills</div>
              <div class="narrow-info-content">
                <% for(let i = 0; i < rows; i++){
                    const kill = calculated.kills[i];

                    if(typeof calculated.kills[i] === 'undefined'){
                    %>
                <div class="kill-stat">
                  <div class="kill-rank"></div>
                </div>
                <% }else{ %>
                <div class="kill-stat">
                  <div class="kill-rank">#<%= i + 1 %>&nbsp;</div>
                  <div class="kill-entity"><%= kill.entityName %></div>
                  <div class="stat-separator">:&nbsp;</div>
                  <div class="kill-amount"><%= kill.amount.toLocaleString() %></div>
                </div>
                <% }
                  } %>
                <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                <button class="kill-stat show-all <%= calculated.kills.length > 10 ? 'enabled' : '' %>" data-type="kills">show all</button>
                <% } %>
              </div>
            </div>
            <div class="narrow-info-container top-deaths">
              <div class="narrow-info-header">Deaths</div>
              <div class="narrow-info-content">
                <% for(let i = 0; i < rows; i++){
                    const death = calculated.deaths[i];

                    if(typeof death === 'undefined'){
                    %>
                <div class="kill-stat">
                  <div class="kill-rank"></div>
                </div>
                <% }else{ %>
                <div class="kill-stat">
                  <div class="kill-rank">#<%= i + 1 %>&nbsp;</div>
                  <div class="kill-entity"><%= death.entityName %></div>
                  <div class="stat-separator">:&nbsp;</div>
                  <div class="kill-amount"><%= death.amount.toLocaleString() %></div>
                </div>
                <% }
                  } %>
                <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                <button class="kill-stat show-all <%= calculated.deaths.length > 10 ? 'enabled' : '' %>" data-type="deaths">show all</button>
                <% } %>
              </div>
            </div>
          </div>
          <% } %>

          <% if('races' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-317_0"></div>
            </div><span>races</span>
          </div>

          <div class="race-containers narrow-info-container-wrapper">
            <%
              const races = [
                { id: "dungeon_hub_crystal_core", name: "Crystal Core", icon: '399_0' },
                { id: "dungeon_hub_giant_mushroom", name: "Giant Mushroom", icon: '100_0' },
                { id: "dungeon_hub_precursor_ruins", name: "Precursor Ruins", icon: '98_1' }
              ];

              const types = ["anything", "no_pearls", "no_abilities", "nothing"];

              for(const race of races){
                const times = Object.keys(calculated.misc.races).filter(a => a.startsWith(race.id));

                if(times.length > 0){
                %>
            <div class="narrow-info-container">
              <div class="narrow-info-header"><%= race.name %></div>
              <div class="narrow-info-content">
                <%
                    const races_no_return = times.filter(a => a.includes("no_return"));
                    const races_with_return = times.filter(a => a.includes("with_return"));

                    if(races_no_return.length > 0){ %>
                <div class="narrow-info-section-header">No Return:</div>
                <% }

                    for(const type of types){
                      const key = `${race.id}_${type}_no_return_best_time`;
                      const duration = calculated.misc.races[key] ?? 0;
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= helper.titleCase(type.split("_").join(" ")) %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% }

                    if(races_with_return.length > 0){ %>
                <div class="narrow-info-section-header">With Return:</div>
                <% }

                    for(const type of types){
                      const key = `${race.id}_${type}_with_return_best_time`;
                      const duration = calculated.misc.races[key] ?? 0;
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= helper.titleCase(type.split("_").join(" ")) %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% } %>
              </div>
            </div>
            <%
                }
              }
              %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">Other Races</div>
              <div class="narrow-info-content">
                <% for(const key in calculated.misc.races){
                      if(key.startsWith('dungeon_hub'))
                        continue;

                      const raceName = helper.capitalizeFirstLetter(key.replace(/_race_best_time.*/, "").split("_").join(" "));
                      let raceDuration = moment.duration(calculated.misc.races[key], "milliseconds").format("m:ss.SSS");
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(calculated.misc.races[key] < 1000)
                        raceDuration = '0.' + raceDuration;
                    %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= raceName %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% } %>
              </div>
            </div>
          </div>
          <% } %>
          <% if('gifts' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/b73a2114136b8ee4926caa51785414036a2b76e4f1668cb89d99716c421)"></div>
            </div><span>Gifts</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.gifts){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.gifts[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('winter' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-332_0"></div>
            </div><span>Season of jerry</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.winter){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.winter[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('dragons' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/aec3ff563290b13ff3bcc36898af7eaa988b6cc18dc254147f58374afe9b21b9)"></div>
            </div><span>Dragons</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.dragons){
                let tooltip = "";

                if(key == 'last_hits')
                  for(const kill of calculated.kills.filter(a => a.entityId.endsWith('_dragon') && a.entityId != 'master_wither_king_dragon'))
                    tooltip += `<span class="stat-name">${ kill.entityName }: </span><span class="stat-value">${ kill.amount }</span> <span class="grey-text">(${ Math.round(kill.amount / calculated.misc.dragons[key] * 100) }%)</span><br>`;

                if(key == 'deaths')
                  for(const death of calculated.deaths.filter(a => a.entityId.endsWith('_dragon') && a.entityId != 'master_wither_king_dragon'))
                    tooltip += `<span class="stat-name">${ death.entityName }: </span><span class="stat-value">${ death.amount }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.dragons[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('protector' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(https://sky.lea.moe/head/89091d79ea0f59ef7ef94d7bba6e5f17f2f7d4572c44f90f76c4819a714)"></div>
            </div><span>Endstone protectors</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.protector){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.protector[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('damage' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-267_0"></div>
            </div><span>Damage</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.damage){ %>
              <% const damage = calculated.misc.damage[key] > 100_000_000_000 ? helper.formatNumber(Math.floor(calculated.misc.damage[key]).toFixed(0), true) : Math.floor(calculated.misc.damage[key]).toLocaleString(); %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= damage %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('milestones' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/93c8aa3fde295fa9f9c27f734bdbab11d33a2e43e855accd7465352377413b)"></div>
            </div><span>Pet milestones</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.milestones){
                let progress = {
                  rarity: milestone_rarities[pet_milestones[key].length-1],
                  maxed: true
                };
                let tooltip = "";

                for(let i = 0; i < pet_milestones[key].length; i++){
                  if(calculated.misc.milestones[key] < pet_milestones[key][i]){
                    progress = {
                      percentage: Math.round(calculated.misc.milestones[key]/pet_milestones[key][i]*100),
                      rarity: milestone_rarities[i],
                      maxed: false
                    };
                    break;
                  }
                }

                tooltip += `<span class="stat-name">Rarity: </span><span class="stat-value piece-${ progress.rarity }-fg">${ helper.capitalizeFirstLetter(progress.rarity) }</span><br><span class="stat-name">Progress: </span>`;
                if(progress.maxed)
                  tooltip += `<span class="stat-value golden-text">Maxed!</span>`;
                else
                  tooltip += `<span class="stat-value percent">${ progress.percentage.toLocaleString() }</span>`;
                %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.milestones[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('burrows' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/4c27e3cb52a64968e60c861ef1ab84e0a0cb5f07be103ac78da67761731f00c8)"></div>
            </div><span>Griffin burrows</span>
          </div>
          <p class="stat-raw-values">
            <%  let burrow_naming = {"dug_next": "dug_arrows", "dug_combat": "dug_monsters"}
              for(const key in calculated.misc.burrows){
                let name = burrow_naming[key] || key;
                let tooltip = "";

                for(const rarity in calculated.misc.burrows[key])
                  if(rarity != "total" && rarity != "null")
                    tooltip += `<span class="stat-name piece-${ rarity }-fg">${ helper.capitalizeFirstLetter(rarity) }: </span><span class="stat-value">${ calculated.misc.burrows[key][rarity] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='<span class="stat-name">Rarities used:</span><br>${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(name.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.burrows[key].total.toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>

          <% if('effects' in calculated.misc){
            if (Object.keys(calculated.misc.effects).some((key) => Object.keys(calculated.misc.effects[key]).length > 0)) { %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/60226d4c1d30fbebecae939da900603e4cd0fed8592a1bb3e11f9ac92391a45a)"></div>
            </div>
            <span>Potions</span>
          </div>
          <%
              let effects_tooltips = [];
              for (const key of Object.keys(calculated.misc.effects).sort()) {
                effects_tooltips[key] ??= [];
                for (let potion of calculated.misc.effects[key]) {
                  if (key === "active") {
                    if (potion?.effect === undefined || potion?.level === null) continue;
                    effects_tooltips[key].push(`<span class="stat-value">${constants.POTION_EFFECTS[potion.effect]?.[potion.level].name.replace('Potion', '') || potion.effect.split('_').map((effect) => helper.capitalizeFirstLetter(effect.toLowerCase())).join(' ')}</span><br>`)

                  } else {
                    potion = potion?.effect || potion

                    effects_tooltips[key].push(`<span class="stat-value">${potion.split('_').map((effect) => helper.capitalizeFirstLetter(effect.toLowerCase())).join(' ')}</span><br>`);
                  }
                }
              }
              %>
          <p class="stat-raw-values">
            <span <%- effects_tooltips['active'] ? `data-tippy-content='<span class="stat-name">Active Potion Effects: :</span><br>${effects_tooltips['active'].join("")}'` : "" %>>
              <span class="stat-name">Active Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.active.length %></span>
            </span><br>

            <span <%- effects_tooltips['paused'] ? `data-tippy-content='<span class="stat-name">Paused Potion Effects: </span><br>${effects_tooltips['paused'].join("")}'` : "" %>>
              <span class="stat-name">Paused Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.paused.length %></span>
            </span><br>

            <span <%- effects_tooltips['disabled'] ? `data-tippy-content='<span class="stat-name">Disabled Potion Effects: </span><br>${effects_tooltips['disabled'].join("")}'` : "" %>>
              <span class="stat-name">Disabled Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.disabled.length %></span>
            </span><br>
          </p>
          <% } %>
          <% } %>

          <% if('profile_upgrades' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-154_0"></div>
            </div><span>Profile upgrades</span>
          </div>
          <p class="stat-raw-values">
            <% for(const upgrade in constants.PROFILE_UPGRADES){ %>
            <% max = calculated.misc.profile_upgrades[upgrade] == constants.PROFILE_UPGRADES[upgrade] ? 'golden-text' : '' %><span class="stat-name <%= max %>"><%= helper.capitalizeFirstLetter(upgrade.split("_").join(" ")); %>: </span><span class="stat-value <%= max %>"><%= calculated.misc.profile_upgrades[upgrade] %> / <%= constants.PROFILE_UPGRADES[upgrade] %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('auctions_sell' in calculated.misc){ %>
          <div class=" category-header">
            <div class="category-icon">
              <div class="item-icon icon-266_0"></div>
            </div><span>Auctions sold</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.auctions_sell){
                let tooltip = "";

                if(key == 'items_sold')
                  for(const key of Object.keys(calculated.auctions_sold).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_sold[key] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_sell[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('auctions_buy' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-264_0"></div>
            </div><span>Auctions bought</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.auctions_buy){
                let tooltip = "";

                if(key == 'items_bought')
                  for(const key of Object.keys(calculated.auctions_bought).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_bought[key] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_buy[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>

          <% if('claimed_items' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-339_0"></div>
            </div><span>Claimed items</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.claimed_items){
                let timestamp = calculated.misc.claimed_items[key];
              %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span>
            <span class="stat-value" data-tippy-content='Claimed on <local-time timestamp="<%= timestamp %>"></local-time>'><%= moment(timestamp).fromNow() %></span><br>
            <% } %>
          </p>
          <% } %>

          <% if ('uncategorized' in calculated.misc && Object.keys(calculated.misc.uncategorized).length > 0) { %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-421_0"></div>
            </div><span>Uncategorized</span>
          </div>
          <p class="stat-raw-values">
            <% for (const [key, value] of Object.entries(calculated.misc.uncategorized)) { %>
            <% max = value.maxed === true ? 'golden-text': '' %>
            <span class="stat-name <%= max %>"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value <%= max %>"><%= value.formatted %> </span>
            <br>
            <% } %>
          </p>
          <% } %>
        </div>
      </div>
      <% } %>
    </div>
  </main>

  <%- include('../includes/footer'); %>

  <script>
    const items = JSON.parse( `<%- JSON.stringify(items).replaceAll('\\', '\\\\') %>` );
    const calculated = JSON.parse( `<%- JSON.stringify(calculated).replaceAll('\\', '\\\\') %>` );
    <% const clientConstants = { MAX_FAVORITES: constants.MAX_FAVORITES } %>
    const constants = JSON.parse( `<%- JSON.stringify(clientConstants).replaceAll('\\', '\\\\') %>` );
  </script>
</body>

</html>
